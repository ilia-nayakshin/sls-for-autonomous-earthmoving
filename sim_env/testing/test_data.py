import numpy as np



def proj_test_data(size):
    '''get projector data array for testing. current supported sizes are:
    '1x1', '2x2', '3x3', '10x10'.'''
    if size == '1x1':
        data = np.array([[[255, 255, 255]]])
    elif size == '2x2':
        data = np.array([[[255, 0, 0], [0, 255, 0]],
                        [[0, 0, 255], [128, 255, 255]]])
    elif size == '3x3':
        data = np.array([[[0, 255, 0], [255, 0, 0], [255, 255, 0]],
                        [[0, 0, 255], [128, 128, 128], [0, 255, 255]],
                        [[255, 0, 255], [255, 255, 255], [0, 128, 0]]])
    elif size == '10x10':
        data = np.array([[[0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0]],
                        [[0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0]],
                        [[0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0]],
                        [[0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0]],
                        [[0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0]], 
                        [[0, 0, 255], [0, 0, 255], [0, 0, 255], [0, 0, 255], [0, 0, 255], [128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128]],
                        [[0, 0, 255], [0, 0, 255], [0, 0, 255], [0, 0, 255], [0, 0, 255], [128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128]],
                        [[0, 0, 255], [0, 0, 255], [0, 0, 255], [0, 0, 255], [0, 0, 255], [128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128]],
                        [[0, 0, 255], [0, 0, 255], [0, 0, 255], [0, 0, 255], [0, 0, 255], [128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128]],
                        [[0, 0, 255], [0, 0, 255], [0, 0, 255], [0, 0, 255], [0, 0, 255], [128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128]]])
    else:
        print("Error: size not supported")
        return None
    return data / 255


def proj_bnw_grid(xsize, ysize, stripwidth):
    data = np.zeros((xsize, ysize, 3))
    for i_r, row in enumerate(data):
        for i_c, _ in enumerate(row):
            data[i_r, i_c] = ((i_r // stripwidth) % 2 == 0) or ((i_c // stripwidth) % 2 == 0)
    return data


def proj_unique_colours(xsize, ysize):
    '''generates an image of unique colours.'''
    num_pixels = xsize * ysize
    x = np.ceil(num_pixels**(1/3))
    step = 1 / (x-1)
    data = np.zeros((xsize, ysize, 3))

    # generate unique data using x-ary counting
    i_r, i_g, i_b, i_p = 0, 0, 0, 0
    while i_p < num_pixels:
        data[i_p // ysize, i_p % ysize] = [step*i_r, step*i_g, step*i_b]
        i_p += 1
        # x-ary counter.
        if i_b == x - 1:
            i_b = 0
            if i_g == x - 1:
                i_g = 0
                i_r += 1
            else:
                i_g += 1
        else:
            i_b += 1

    return data